<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FFCCCCCC"
    android:orientation="vertical"
    tools:context=".MainActivity" >
    
    
    <!-- Inside this layout we will add the buttons for starting a new drawing, 
    	selecting a brush, selecting an eraser, and saving a drawing. -->
    <LinearLayout
    	android:layout_width="wrap_content"
    	android:layout_height="50dp"
    	android:layout_gravity="center"
    	android:orientation="horizontal" >
    	
    	<!-- Start with the button to create a new drawing inside the second Linear Layout.
    		We will use the ID to respond to button clicks in the Activity class. 
    		We specify the new button icon image as source for the ImageButton and add a content description string.-->
    	<ImageButton
    		android:id="@+id/new_btn"
    		android:layout_width="wrap_content"
    		android:layout_height="fill_parent"
    		android:contentDescription="@string/start_new"
    		android:src="@drawable/new_pic" 
    		/>
    	
    	<!-- this is the brush button -->
    	<ImageButton
    		android:id="@+id/draw_btn"
    		android:layout_width="wrap_content"
    		android:layout_height="fill_parent"
    		android:contentDescription="@string/brush"
    		android:src="@drawable/brush" 
    		/>
    		
    	<!-- this is the eraser button -->
    	<ImageButton
    		android:id="@+id/erase_btn"
    		android:layout_width="wrap_content"
    		android:layout_height="fill_parent"
    		android:contentDescription="@string/erase"
    		android:src="@drawable/eraser" 
    		/>

    	<!-- this is the eraser button -->
    	<ImageButton
    		android:id="@+id/save_btn"
    		android:layout_width="wrap_content"
    		android:layout_height="fill_parent"
    		android:contentDescription="@string/save"
    		android:src="@drawable/save" 
    		/>

    	<!-- That's it for the top Linear Layout control buttons. -->
    	
    	
    	<!-- Second, we add an instance of the custom view class we created-->
    	
    	<!-- By retrieving a reference to this instance of the custom View class, 
    		our Activity will be able to access the methods we define in the View class declaration we created. -->
    	<com.example.drawingfun.DrawingView
    		android:id="@+id/drawing"
    		android:layout_width="fill_parent"
    		android:layout_height="0dp"
    		android:layout_marginBottom="3dp"
    		android:layout_marginLeft="5dp"
    		android:layout_marginRight="5dp"
    		android:layout_marginTop="3dp"
    		android:layout_weight="1"
    		android:background="#FFFFFFFF" 
    		/>

    	<!-- Third, we add another Linear Layout for the palette buttons.
    		This element will contain two rows of buttons-->
    	<LinearLayout
    		android:layout_width="wrap_content"
    		android:layout_height="wrap_content"
    		android:layout_gravity="center"
    		android:orientation="vertical" >
    		
    		<!-- Top Row -->
    		<!-- This row has an ID because we are going to use it in Java,
    			 when the app starts to set the first default color as selected,
    			 so that the user can start drawing straight away.  -->
			<LinearLayout
    			android:id="@+id/paint_colors"
    			android:layout_width="wrap_content"
    			android:layout_height="wrap_content"
    			android:orientation="horizontal" >
			</LinearLayout>
			
			<!-- Bottom Row -->
			<LinearLayout
    			android:layout_width="wrap_content"
    			android:layout_height="wrap_content"
    			android:orientation="horizontal" >
			</LinearLayout>
			
		</LinearLayout>
    		
    		
    	
    	
    	
    	
	</LinearLayout>
 
</LinearLayout>