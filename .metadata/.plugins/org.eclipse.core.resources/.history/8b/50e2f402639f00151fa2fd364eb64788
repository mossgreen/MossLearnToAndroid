package com.example.painter;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.view.MotionEvent;


//i'd like to extends SurfaceView rather than View, since SV is more efficient than View
public class PaintView extends View implements OnTouchListener{
	
	//drawing path
	private Path drawPath;
	//drawing and canvas paint
	private Paint drawPaint, canvasPaint;
	//initial color
	private int paintColor = 0xFF660000;
	//canvas
	private Canvas drawCanvas;
	//canvas bitmap
	private Bitmap canvasBitmap;


	// define additional constructors so that PaintView will work with out layout file
	public PaintView(Context context) {
		super(context);
		
		setup();
	}

	public PaintView(Context context, AttributeSet attrs, int defStyleAttr) {
		super(context, attrs, defStyleAttr);
		
		setup();
	}

	public PaintView(Context context, AttributeSet attrs) {
		super(context, attrs);
		
		setup();
	}

	public void setup()
	{
		drawPath = new Path();
		drawPaint = new Paint();
        
		//Next set the initial color:
		drawPaint.setColor(paintColor);

		
//		Now set the initial path properties:
//		 Setting the anti-alias, stroke join and cap styles will make the user's drawings appear smoother.
		drawPaint.setAntiAlias(true);
		drawPaint.setStrokeWidth(20);
		drawPaint.setStyle(Paint.Style.STROKE);
		drawPaint.setStrokeJoin(Paint.Join.ROUND);
		drawPaint.setStrokeCap(Paint.Cap.ROUND);
		
	}

	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		
		//canvas.drawCircle(x, y, 50, paint);
		//draw the off screen bitmap
		//canvas.drawBitmap(offScreenBitmap, 0, 0,paint);
		
		// this is the default one
//		mPath.addCircle(mX, mY, 40, null);
		canvas.drawPath(mPath, paint); //use the canvas to draw the the picture that made of multi-points
		
//		canvas.drawCircle(mX, mY,40, paint);
		
		//second added
//		Paint bmpPaint = new Paint();
//        canvas.drawColor(0xFFAAAAAA);  
//
//		canvas.drawBitmap(cacheBitmap, 1, 1,bmpPaint);
//		canvas.drawPath(mPath, paint);
		
		
	}
	
	

	@Override
	public boolean onTouch(View v, MotionEvent event) {

		// get the x,y coordinates of the MotionEvent.ACTION_MOVE event
		switch (event.getAction()) {
		
			case MotionEvent.ACTION_DOWN:
				touchDown(event);
				break;
				
//			case MotionEvent.ACTION_UP:
//				x = event.getX();
//				y = event.getY();
//				break;
//				
			case MotionEvent.ACTION_MOVE:
				touchMove(event);
				break;

		}	
		invalidate(); //// force a screen re-draw
		return true; //return true to consume event from the event queue
	}
	
	private void touchDown(MotionEvent event){
		mPath.reset(); //redraw the path, hide the previous path
		
		
		float x = event.getX();
		float y = event.getY();
		
		mX = x;
		mY = y;
		
		
		mPath.moveTo(x, y); // this is the starting point 
	}
	
	private void touchMove(MotionEvent event){
		final float x = event.getX();
		final float y = event.getY();
		
		final float previousX = mX;
		final float previousY = mY;
		
		final float dx = Math.abs(x-previousX);
		final float dy = Math.abs(y-previousY);
		
		//draw a 贝塞尔绘制曲线  if dx > 3
		if(dx >= 3 || dy >= 3){
			float cX = (x + previousX) / 2;
			float cY = (y + previousY) / 2;
			
			// do 贝塞尔绘制曲线  again to make the line more smooth?
			mPath.quadTo(previousX, previousY, cX, cY);
			
			mX = x;
			mY = y;
		}
	}
	
	@Override
	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		super.onSizeChanged(w, h, oldw, oldh);
		
		//create & re-create t he off screen bitmap to capture the state of our drawing 
		// this operation will reset the user's drawing
		
		cacheBitmap = Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);
		cacheCanvas = new Canvas(cacheBitmap);
	}
}
