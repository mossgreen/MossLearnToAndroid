package com.feifei.marslander.game;

import java.util.Random;
import java.util.Vector;

import com.feifei.marslander.model.Craft;
import com.feifei.marslander.model.Mars;

import android.content.res.Resources.Theme;
import android.graphics.Path;
import android.graphics.Point;
import android.util.Log;


/**
 * @author credited to com.victor.marslander, modified by Feifei GU Jan/11/2016. Assignment
 *         of subject ISCG7424 Mobile Application Development of Unitec, NZ.
 * 
 */
public class GameLoop {


	private final float GRAVITY = 2.0f; 
	private final float PIXELMETERRATIO = 8;
	
	// game constants
	public static final int STATE_READY = 0;
	public static final int STATE_RUNNING = 1;
	public static final int STATE_WON = 2;
	public static final int STATE_CRASHED = 3;
	public static final int STATE_FALL_LEFT = 4;
	public static final int STATE_FALL_RIGHT = 5;
	private int state = STATE_READY;
	
	
	// the screen width and height value
	private int screenWidth;
	private int screenHeight;
	
	// get the time stamp
	private long timeStamp; 
	
	//get a random value via Returns the current time in milliseconds
	private final Random rdm = new Random(System.currentTimeMillis());

	// get references to objects in model package
	private Craft craft;
	private Mars mars;

	/**
	 * constructor
	 * @param screenWidth
	 * @param screenHeight
	 */
	public GameLoop(int screenWidth, int screenHeight) {
		this.screenWidth = screenWidth;
		this.screenHeight = screenHeight;
		init();
	}

	/**
	 * set the game to start.
	 * will initialize craft and mars objects
	 * and set the game status to running
	 */
	public void startGame() {
		init();
		state = STATE_RUNNING;
	}

	/**
	 * initialize craft and mars objects
	 * get the most precise time stamp which is  available in the local system
	 */
	private void init() {
		//set the x position of the craft in coordinate with random
		int posX = Craft.WIDTH* 2 + rdm.nextInt(screenWidth - Craft.WIDTH * 4);
		
		//initialize craft object
		craft = new Craft(posX, 0, GRAVITY, PIXELMETERRATIO);

		//initialize mras object
		mars = new Mars( screenWidth, screenHeight, (int) (Craft.WIDTH* 1.0f), Craft.WIDTH * 2 );
		//
		timeStamp = System.nanoTime();
	}

	/**
	 * getter of craft object
	 * @return craft object
	 */
	public Craft getCraft() {
		return craft;
	}

	/**
	 * getter of the mars object
	 * @return mars object
	 */
	public Mars getMars() {
		return mars;
	}

	public int getState() {
		return state;
	}

	/**
	 * Update all of the physical position points and does crash test.
	 */
	public void update() {
		final long t = System.nanoTime();
		final float dt = (float) (t - timeStamp) * (1.0f / 1000000000.0f);// 
		craft.update(dt);

		// side
		if (craft.getCenterX() < 0) {
			craft.setX(screenWidth - craft.getCraftWidth() / 2);
		} else if (craft.getCenterX() > screenWidth) {
			craft.setX(-craft.getCraftWidth() / 2);
		}

		// crash test
		Path p = craft.genOutline();
		p.op(mars.getGround(), Path.Op.INTERSECT);//Set this path to the result of applying the Op to this path and the specified path. 
		if (!p.isEmpty()) {
			if (!isFlatGround(craft.getX(), craft.getCraftWidth())) {
				state = STATE_CRASHED;
			} else {
				if (craft.getAngle() > 0) {
					state = STATE_FALL_RIGHT;
				} else if (craft.getAngle() < 0) {
					state = STATE_FALL_LEFT;
				} else {
					state = STATE_WON;
				}
			}
		}
		timeStamp = t;
	}

	/**
	 * Test for whether the craft landed on the flat ground.
	 * @param x The x point value.
	 * @param w The distance from x.
	 * @return boolean True for landed successfully otherwise return false.
	 */
	private boolean isFlatGround(float x, int w) {
		Vector<Point> points = mars.getGroundPoints();
		int len = points.size();
		int i = 1;
		for (; i < len; i++) {
			if (points.elementAt(i).x >= x) {
				// find the start point
				break;
			}
		}

		Point pStart = points.elementAt(i - 1);
		Point pEnd = points.elementAt(i);

		if (pStart.y != pEnd.y) {
			// slope
			return false;
		}

		// consequent flat ground
		for (i = i + 1; i < len; i++) {
			if (points.elementAt(i).y != pEnd.y) {
				break;
			} else {
				pEnd = points.elementAt(i);
			}
		}

		if (pEnd.x - pStart.x > w) {
			// enough
			return true;
		}

		// other
		return false;
	}
}
