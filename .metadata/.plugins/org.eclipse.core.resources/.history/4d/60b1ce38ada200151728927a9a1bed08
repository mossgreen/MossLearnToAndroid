package com.example.assignment01;


import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import java.util.UUID;
import android.provider.MediaStore;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.widget.Toast;

public class MainActivity extends Activity implements OnClickListener {
	private PaintView paintView;//This represents the instance of the custom View that we added to the layout.

	//represents the paint color button in the palette, the drawing button, eraser button, and new_draw button
	private ImageButton currPaint, drawBtn, eraseBtn, newBtn, saveBtn;
	private ImageButton currShape, triBtn, cirBtn, rectBtn;
	private float smallBrush, mediumBrush, largeBrush; // to store the three dimension values


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_main);
		
		drawView = (DrawingView)findViewById(R.id.drawing);//retrieving a reference from the layout
		
		//we now want to retrieve the first paint color button in the palette area, which is initially going to be selected. 
		//First retrieve the Linear Layout it is contained within:
		LinearLayout paintLayout = (LinearLayout)findViewById(R.id.paint_colors);

		
		//Get the first button and store it as the instance variable
		//use a different drawable image on the button to show that it is currently selected:
		currPaint = (ImageButton)paintLayout.getChildAt(0);
		currPaint.setImageDrawable(getResources().getDrawable(R.drawable.paint_pressed));
		
		//retrieve a reference to the draw button from the layout and set up a click listener
		drawBtn = (ImageButton)findViewById(R.id.draw_btn);
		drawBtn.setOnClickListener(this);
		
		//retrieve a reference to the eraser button from the layout and set up a click listener
		eraseBtn = (ImageButton)findViewById(R.id.erase_btn);
		eraseBtn.setOnClickListener(this);
		
		//retrieve a reference to the new button from the layout and set up a click listener
		newBtn = (ImageButton)findViewById(R.id.new_btn);
		newBtn.setOnClickListener(this);
		
		//retrieve a reference to the save button from the layout and set up a click listener
		saveBtn = (ImageButton)findViewById(R.id.save_btn);
		saveBtn.setOnClickListener(this);
		
		saveBtn = (ImageButton)findViewById(R.id.exit_btn);
		saveBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				finish();
			}
		});
		
//		currShape
		
		
		triBtn = (ImageButton)findViewById(R.id.triangle);
		triBtn.setOnClickListener(this);
		
		cirBtn = (ImageButton)findViewById(R.id.circle);
		cirBtn.setOnClickListener(this);
		
		rectBtn = (ImageButton)findViewById(R.id.rectangle);
		rectBtn.setOnClickListener(this);
		
		
		
		//Instantiate brushes
		smallBrush = getResources().getInteger(R.integer.small_size);
		mediumBrush = getResources().getInteger(R.integer.medium_size);
		largeBrush = getResources().getInteger(R.integer.large_size);
		
		//set the initial brush size
		paintView.setBrushSize(smallBrush);

	}
	
	public void colorClicked(View view){
	    //use chosen color
		
		if(view!=currColor){
			//update color
			ImageButton imgView = (ImageButton)view;
			String color = view.getTag().toString();
			
			//after retrieving the color tag, call the new method on the custom drawing View object
			paintView.setColor(color);
			
			
			//update the UI to reflect the new chosen paint and set the previous one back to normal:
			imgView.setImageDrawable(getResources().getDrawable(R.drawable.pressed));
			currColor.setImageDrawable(getResources().getDrawable(R.drawable.paint));
			currColor=(ImageButton)view;
			
			}
	}
	
	public void shapeClicked(View view){
	    //use chosen color
		
		
		if(view!=currShape){
			//update color
			ImageButton imgView = (ImageButton)view;
			String shape = view.getTag().toString();
			
			//after retrieving the color tag, call the new method on the custom drawing View object
			paintView.setShape(shape);
			
			
			//update the UI to reflect the new chosen paint and set the previous one back to normal:
			imgView.setImageDrawable(getResources().getDrawable(R.drawable.pressed));
			currShape.setImageDrawable(getResources().getDrawable(R.drawable.paint));
			currShape=(ImageButton)view;
			
			}
	}
	
	
	
	@Override
	public void onClick(View v) {
	}
}
