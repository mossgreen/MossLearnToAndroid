package com.feifei.marslander.game;

import java.util.Random;
import java.util.Vector;

import com.feifei.marslander.model.Craft;
import com.feifei.marslander.model.Mars;

import android.content.res.Resources.Theme;
import android.graphics.Path;
import android.graphics.Point;
import android.util.Log;

/**
 * @author com.victor.marslander, modified by Feifei GU in Jan/11/2016. this is
 *         an Assignment of subject ISCG7424 Mobile Application Development of
 *         Unitec, NZ. Code illustrates collision detection and models gravity
 *         using synthetic time.
 */
public class GameLoop {

	// game status constants
	public static final int STATE_READY = 0;
	public static final int STATE_RUNNING = 1;
	public static final int STATE_WON = 2;
	public static final int STATE_CRASHED = 3;
	public static final int STATE_GAMEOVER = 4;

	// set game state to ready
	private int state = STATE_READY;

	// the screen width and height value
	private int screenWidth;
	private int screenHeight;

	// get the time stamp
	private long timeStamp;

	// get a random value via Returns the current time in milliseconds
	private final Random rdm = new Random(System.currentTimeMillis());

	// get references to objects in model package
	private Craft craft;
	private Mars mars;

	/**
	 * constructor
	 * 
	 * @param screenWidth
	 * @param screenHeight
	 */
	public GameLoop(int screenWidth, int screenHeight) {
		this.screenWidth = screenWidth;
		this.screenHeight = screenHeight;
		init();
	}

	/**
	 * set the game to start. will initialize craft and mars objects and set the
	 * game status to running
	 */
	public void startGame() {
		init();
		state = STATE_RUNNING;
	}

	/**
	 * initialize craft and mars objects get the most precise time stamp which
	 * is available in the local system
	 */
	private void init() {
		// set the x position of the craft in coordinate with random
		int posX = Craft.WIDTH * 2 + rdm.nextInt(screenWidth - Craft.WIDTH * 4);

		// initialize craft object
		craft = new Craft(posX, 0);

		// initialize mras object
		mars = new Mars(screenWidth, screenHeight, Craft.WIDTH, Craft.WIDTH * 2);
		//
		timeStamp = System.nanoTime();
	}

	/**
	 * getter of craft object
	 * 
	 * @return craft object
	 */
	public Craft getCraft() {
		return craft;
	}

	/**
	 * getter of the mars object
	 * 
	 * @return mars object
	 */
	public Mars getMars() {
		return mars;
	}

	/**
	 * getter of the game state
	 * 
	 * @return game state
	 */
	public int getState() {
		return state;
	}

	/**
	 * setter of the game state
	 * 
	 * @param state
	 */
	public void setState(int state) {
		this.state = state;
	}

	/**
	 * Update all of the x_y positions in coordinate, and do crash test.
	 */
	public void update() {

		// update craft with dt, which is to update it in a very short of time
		final long t = System.nanoTime();
		final float extremelySmallNumber = 1.0f / 1000000000.0f;
		final float dt = (float) (t - timeStamp) * extremelySmallNumber;
		craft.update(dt);

		/*
		 * wrap around terrain: when a player goes to a left or right game
		 * boundary instead of being blocked, they will pass through to the
		 * opposite side of the game field
		 */
		if (craft.getCenterX() < 0) {
			craft.setX(screenWidth - Craft.WIDTH / 2);
		} else if (craft.getCenterX() > screenWidth) {
			craft.setX(-Craft.WIDTH / 2);
		}

		/*
		 * to detect when the craft intersects with the mars landscape. 
		 * set the path to the outline of craft.
		 * applying the Op to this path and the mars ground path

		 * if there is intersection, it indicates that craft is on the mars now.
		 * and the status of craft is not decide yet
		 * then, go and check whether the ground is flat. 
		 * if it's not a flat ground,
		 * it indicates that the craft is crashed. if the ground is flat,
		 * however the craft is not standing up, it also indicates that the
		 * craft is crashed. otherwise, the craft is landed on mars
		 * successfully.
		 */

		Path p = craft.genOutline();
		p.op(mars.getGround(), Path.Op.INTERSECT);
		if (!p.isEmpty()) {
			if (!isFlatGround(craft.getX(), Craft.WIDTH)) {
				state = STATE_CRASHED;
			} else {
				if (craft.getAngle() != 0) {
					state = STATE_CRASHED;
				} else {
					state = STATE_WON;
				}
			}
		}
		timeStamp = t;
	}

	/**
	 * Test for whether the craft landed on the flat ground.
	 * 
	 * @param x
	 *            The x point value.
	 * @param w
	 *            The distance from x.
	 * @return boolean True for land is flat otherwise return false.
	 */
	private boolean isFlatGround(float x, int w) {
		Vector<Point> points = mars.getGroundPoints();
		int len = points.size();
		int i = 1;
		for (; i < len; i++) {
			if (points.elementAt(i).x >= x) {
				// find the start point
				break;
			}
		}

		Point pStart = points.elementAt(i - 1);
		Point pEnd = points.elementAt(i);

		if (pStart.y != pEnd.y) {
			// slope
			return false;
		}

		// consequent flat ground
		for (i = i + 1; i < len; i++) {
			if (points.elementAt(i).y != pEnd.y) {
				break;
			} else {
				pEnd = points.elementAt(i);
			}
		}

		/*
		 * to check the length of the flat ground
		 * if the length is enough for a craft
		 * return true
		 * otherwise, return false
		 */
		if (pEnd.x - pStart.x > w) {
			
			return true;
		}

		// other
		return false;
	}
}
