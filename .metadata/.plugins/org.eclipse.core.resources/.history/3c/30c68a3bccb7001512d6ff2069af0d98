package com.feifei.marslander.model;

import java.util.Random;
import java.util.Vector;

import android.graphics.Path;
import android.graphics.Point;
import android.util.Log;


/**
 * @author credit to com.victor.marslander, modified by Feifei GU, Jan/11/2016. Assignment
 *         of subject ISCG7424 Mobile Application Development
 * 
 */
public class Mars {
	private final int MIN_WIDTH = 30;
	private final int BASE_HEIGHT = 50;
	private final float MIN_GRADIENT = 0.2f;
	public static final int maxHeight = 300;
	
	private float flatRemainingRatio = 0.3f;
	
	private int minSingleFlatWidth;
	private int maxSingleFlatWidth;
	private int remainingFlatWidth ;
	private int remainingSlopeWidth;
	
//	mars = new Mars(flatRemainingRatio, screenWidth, screenHeight, (int) (Craft.WIDTH* 1.0f), Craft.WIDTH * 2 );


	private int screenHeight;

	private final Random rdm = new Random(System.currentTimeMillis());
	private Vector<Point> map;
	private Path ground;

	public Mars( int scrWidth, int scrHeight, int minWidth, int maxWidth) {
		this.minSingleFlatWidth = minWidth;
		this.maxSingleFlatWidth = maxWidth;
		this.remainingFlatWidth = (int) (flatRemainingRatio * scrWidth);
		this.remainingSlopeWidth = scrWidth - remainingFlatWidth;
		this.screenHeight = scrHeight;
	}

	/**
	 * Generates map
	 */
	private void generateMap() {
		//
		map = new Vector<Point>();
		ground = null;
		
		Point currP, newP;
		
		map.add(new Point(0, screenHeight));
		currP = new Point(0, screenHeight - BASE_HEIGHT - rdm.nextInt(maxHeight));
		map.add(currP);

		//first slope
		newP = getSlopeEnd(currP);
		if (newP != null) {
			currP = newP;
			map.add(currP);
		}
		
		while (remainingSlopeWidth > 0 || remainingFlatWidth > 0) {
			if (rdm.nextBoolean()) {
				// flat
				newP = getFlatEnd(currP);
			} else {
				newP = getSlopeEnd(currP);
			}
			if (newP != null) {
				currP = newP;
				map.add(currP);
			}
		}
		
		map.add(new Point(currP.x, screenHeight));
		map.add(new Point(0, screenHeight));
	}
	
	/**
	 * Gets ground points.
	 * @return Vector The ground points
	 */
	public Vector<Point> getGroundPoints(){
		if(map != null){
			return map;
		}
		
		getGround();
		return map;
	}
	
	/**
	 * Gets the ground path.
	 * @return The ground path
	 */
	public Path getGround(){
		if(ground != null){
			return ground;
		}
		
		generateMap();
		
		Point p;
		ground = new Path();
		int len = map.size();
		for(int i=0; i<len; i++){
			p = map.elementAt(i);
			ground.lineTo(p.x, p.y);
		}
		ground.close();
		return ground;
	}

	/**
	 * Obtain the flat point
	 * @param curr The current point
	 * @return Point The flat point
	 */
	private Point getFlatEnd(Point curr) {

		if (remainingFlatWidth <= 0) {
			return null;
		}
		int width = 0;
		if (remainingFlatWidth <= minSingleFlatWidth * 2) {
			// last one
			width = remainingFlatWidth;
			remainingFlatWidth = 0;
			return new Point(curr.x + width, curr.y);
		}

		width = rdm.nextInt(maxSingleFlatWidth - minSingleFlatWidth) + minSingleFlatWidth;
		remainingFlatWidth -= width;
		return new Point(curr.x + width, curr.y);
	}

	/**
	 * Get the next slope end point
	 * @param curr The current point
	 * @return The slope point
	 */
	private Point getSlopeEnd(Point curr) {
		if (remainingSlopeWidth <= 0) {
			return null;
		}

		int width = MIN_WIDTH;
		if (remainingSlopeWidth > MIN_WIDTH) {
			width = rdm.nextInt(remainingSlopeWidth) + 1;
		}
		
		int y = curr.y;
		float r = (float)Math.abs(y - curr.y) / width;
		while(r < MIN_GRADIENT){
			y = screenHeight - BASE_HEIGHT - rdm.nextInt(maxHeight);
			r =  (float)Math.abs(y - curr.y) / width;
		}
		
		remainingSlopeWidth -= width;
		return new Point(curr.x + width, y);
	}

}
